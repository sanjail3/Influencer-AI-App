datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core user model with Clerk authentication integration
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  username      String
  email         String    @unique
  credits       Int       @default(10)
  maxCredits    Int       @default(10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  subscription  UserSubscription?
  projects      Project[]
  videos        Video[]

  @@index([clerkId])
}

// Project management
model Project {
  id          String    @id @default(cuid())
  name        String
  userId      String
  websiteUrl  String
  metadata    Json?     // Stored website metadata
  createdAt   DateTime  @default(now())
  projectType String   @default("DEFAULT")
  updatedAt   DateTime  @updatedAt
  taskId      String?

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos      Video[]   @relation("ProjectToVideo")

  @@index([userId])
}

// Video management
model Video {
  id          String      @id @default(cuid())
  userId      String
  projectId   String
  title       String
  description String?
  status      VideoStatus
  blobUrl     String?     // Azure Blob Storage URL
  creditsCost Int         @default(10)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project     @relation("ProjectToVideo", fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Subscription plan configuration
model SubscriptionPlan {
  id                 String             @id @default(cuid())
  productId          Int
  productName        String
  variantId          Int                @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean            @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  subscriptions      UserSubscription[]

  @@index([variantId])
}

// Lemon Squeezy webhook events
model LsWebhookEvent {
  id              String    @id @default(cuid())
  eventName       String
  processed       Boolean   @default(false)
  body            Json
  processingError String?
  createdAt       DateTime  @default(now())

  @@index([processed])
  @@index([eventName])
}

// User subscription details from Lemon Squeezy
model UserSubscription {
  id                 String           @id @default(cuid())
  lemonSqueezyId     String           @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean          @default(false)
  isPaused           Boolean          @default(false)
  subscriptionItemId String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relations
  userId             String           @unique  // Added @unique constraint here
  user               User             @relation(fields: [userId], references: [id])
  planId             String
  subscriptionPlan   SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([lemonSqueezyId])
  @@index([status])
}